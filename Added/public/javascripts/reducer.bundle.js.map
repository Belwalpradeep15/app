{"version":3,"sources":["webpack/bootstrap","/home/jenkins/workspace/CentOS7-Panoptes/common/apps/ui/src/utils/reducer.ts","/home/jenkins/workspace/CentOS7-Panoptes/common/apps/ui/src/workers/reducer.ts","/home/jenkins/workspace/CentOS7-Panoptes/common/apps/ui/src/utils/ants.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","callbacks","width","time","_rawFibreShots","setModes","this","_modes","func","pos","max","min","widthFactor","j","length","Math","amplitudes","sumP","sumN","countP","countN","abs","avgN","avgP","numMappingPos","numMappingNeg","greatestFreqPos","greatestFreqNeg","modePos","modeNeg","negCount","posCount","nbr","setMode","setWidth","setTime","timeFactor","clear","add","fibreShot","reset","channel","startingPosition","push","v","command","Ant","worker","onmessage","message","data","params","response","postMessage","ant","workerPath","options","awaitingReply","example","proto","getPrototypeOf","getOwnPropertyNames","forEach","getOwnPropertyDescriptor","set","val","includes","run","self","Worker","e","acceptMessage","answer","prom","resolve","register","callback","Promise","reject","Queen"],"mappings":"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","file":"reducer.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 125);\n","/* Reducer\n * Data Reducer node for a Fotech FibreStream\n *\n * Provides a simple mechanism for containing (retaining) fibreshots\n * which are reduced in size by some factor in terms of time and\n * width\n *\n * takes in a scale factor and a callback function which is called\n * whenever a \"new\" temporally downsampled firbreshot has been created\n *\n * Implemented using a worker thread to actually perform the calculation\n * meaning that for the most part this class is a message passing system\n * with potential queueing.\n */\n\nimport { Ant } from './ants';\n\nexport default class Reducer extends Ant {\n    private widthFactor: number;\n    private timeFactor: number;\n    private mode: string;\n\n    private _rawFibreShots: any = [];\n    private _modes: any;\n\n    constructor( { callbacks = {}, width = 10, time = 10, mode = 'magnitude' } ) {\n        super();\n        this.setModes();\n        this.setMode( mode );\n        this.setWidth( width );\n        this.setTime( time );\n    }\n\n    public setWidth( width ) {\n        this.widthFactor = width;\n    }\n\n    public setTime( time ) {\n        this.timeFactor = time;\n    }\n\n    public setMode( mode ) {\n        if ( this._modes[ mode ] ) {\n            this.mode = mode;\n        }\n    }\n\n    public clear() {\n        this._rawFibreShots.length = 0;\n    }\n\n    public add( fibreShot ) {\n        const timeEpsilon = 10000;  // time diff of more than 10 seconds as suggested by george\n        let reset = false;\n\n        /* Compensate for MUX units (or other things) changing the starting position of the\n        * fibreshot (and most likely its length too) as we cannot temporally decimate two\n        * fibreshots which aren't even remotely alike) */\n\n        /* Compensate for great time differences (temporal discontinuity) */\n        if (\n            this._rawFibreShots.length > 0\n            &&\n            (\n                /* Channel IDs (true MUXing) */\n                this._rawFibreShots[ 0 ].channel !== fibreShot.channel\n                ||\n                this._rawFibreShots[ 0 ].startingPosition !== fibreShot.startingPosition\n                ||\n                this._rawFibreShots[ 0 ].amplitudes.length !== fibreShot.amplitudes.length\n                ||\n                /* Time discontinuity - Time running backwards */\n                fibreShot.time < this._rawFibreShots[ 0 ].time\n                ||\n                /* Time discontinuity - Huge time gap */\n                Math.abs( fibreShot.time - this._rawFibreShots[ 0 ].time ) > timeEpsilon\n            )\n        ) {\n            reset = true;\n        }\n\n        if ( !reset ) {\n            /* We can simply add this entry as it is equivalent to those we already have */\n            this._rawFibreShots.push( fibreShot );\n        }\n\n        if ( this._rawFibreShots.length >= this.timeFactor || reset ) {\n            /* we need to clone a fibreshot, or at least take the most recent */\n            const amplitudes = [];\n\n            /* now we need to reduce according to our mode */\n            for ( let i = 0; i < this._rawFibreShots[ 0 ].amplitudes.length; i += this.widthFactor ) {\n                const v = this._modes[ this.mode ].func( i );\n                if ( Math.abs( v[ 0 ] ) > Math.abs( v[ 1 ] ) ) {\n                    amplitudes.push( v[ 0 ] );\n                } else {\n                    amplitudes.push( v[ 1 ] );\n                }\n            }\n            this._rawFibreShots[ 0 ].amplitudes = amplitudes;\n            this.command( 'run', 'added', this._rawFibreShots[ 0 ] );\n            this._rawFibreShots.length = 0;\n        }\n\n        if ( reset ) {\n            /* We should store the new fibreshot that's come in regardless */\n            this._rawFibreShots.push( fibreShot );\n        }\n    }\n\n    public setModes = function () {\n        this._modes = {\n            'magnitude': {\n                name: 'Peak to peak',\n                func: function ( pos ) {\n                    let max = 0; // this._rawFibreShots[0].amplitudes[pos];\n                    let min = 0; // this._rawFibreShots[0].amplitudes[pos];\n                    for ( let i = 0; i < this.widthFactor; ++i ) {\n                        for ( let j = 0; j < this._rawFibreShots.length; ++j ) {\n                            max = Math.max( max, this._rawFibreShots[ j ].amplitudes[ pos + i ] );\n                            min = Math.min( min, this._rawFibreShots[ j ].amplitudes[ pos + i ] );\n                        }\n                    }\n\n                    return [ min, max ];\n                }.bind( this )\n            },\n            'nth': {\n                name: 'Nth',\n                func: function ( pos ) {\n                    let max = null;\n                    let min = null;\n\n                    for ( let i = 0; i < this.widthFactor; ++i ) {\n                        for ( let j = 0; j < this._rawFibreShots.length; ++j ) {\n                            if ( this._rawFibreShots[ j ].amplitudes[ pos + i ] >= 0 ) {\n                                max = this._rawFibreShots[ j ].amplitudes[ pos + i ];\n                            } else {\n                                min = this._rawFibreShots[ j ].amplitudes[ pos + i ];\n                            }\n                        }\n\n                        if ( max && min ) {\n                            break;\n                        }\n                    }\n\n                    if ( !min ) {\n                        min = max;\n                    }\n                    if ( !max ) {\n                        max = min;\n                    }\n\n                    return [ min, max ];\n                }.bind( this )\n            },\n            'mean': {\n                name: 'Average',\n                func: function ( pos ) {\n                    let sumP = 0;\n                    let sumN = 0;\n                    let countP = 0;\n                    let countN = 0;\n\n                    for ( let i = 0; i < this.widthFactor; ++i ) {\n                        for ( let j = 0; j < this._rawFibreShots.length; ++j ) {\n                            if ( this._rawFibreShots[ j ].amplitudes[ pos + i ] >= 0 ) {\n                                sumP += this._rawFibreShots[ j ].amplitudes[ pos + i ];\n                                countP++;\n                            } else {\n                                sumN += Math.abs( this._rawFibreShots[ j ].amplitudes[ pos + i ] );\n                                countN++;\n                            }\n                        }\n                    }\n\n                    let avgN = ( sumN / Math.max( 1, countN ) ) * -1;\n\n                    let avgP = sumP / Math.max( 1, countP );\n\n                    if ( countN === 0 ) {\n                        avgN = avgP;\n                    }\n                    if ( countP === 0 ) {\n                        avgP = avgN;\n                    }\n\n                    return [\n                        avgN,\n                        avgP\n                    ];\n                }.bind( this )\n            },\n            'mode': {\n                name: 'Most frequent',\n                func: function ( pos ) {\n                    const numMappingPos = {};\n                    const numMappingNeg = {};\n\n                    let greatestFreqPos = 0;\n                    let greatestFreqNeg = 0;\n                    let modePos = 0;\n                    let modeNeg = 0;\n\n                    let negCount = 0;\n                    let posCount = 0;\n\n                    for ( let i = 0; i < this.widthFactor; ++i ) {\n                        for ( let j = 0; j < this._rawFibreShots.length; ++j ) {\n                            const nbr = this._rawFibreShots[ j ].amplitudes[ pos + i ];\n                            if ( nbr >= 0 ) {\n                                numMappingPos[ nbr ] = ( numMappingPos[ nbr ] || 0 ) + 1;\n                                posCount++;\n                                if ( greatestFreqPos < numMappingPos[ nbr ] ) {\n                                    greatestFreqPos = numMappingPos[ nbr ];\n                                    modePos = nbr;\n                                }\n                            } else {\n                                numMappingNeg[ nbr ] = ( numMappingNeg[ nbr ] || 0 ) + 1;\n                                negCount++;\n                                if ( greatestFreqNeg < numMappingNeg[ nbr ] ) {\n                                    greatestFreqNeg = numMappingNeg[ nbr ];\n                                    modeNeg = nbr;\n                                }\n                            }\n                        }\n                    }\n\n                    if ( negCount === 0 ) {\n                        modeNeg = modePos;\n                    }\n\n                    if ( posCount === 0 ) {\n                        modePos = modeNeg;\n                    }\n\n                    return [ modeNeg, modePos ];\n                }.bind( this )\n            }\n        };\n    };\n\n}\n","/* Reducer\n * Data Reducer node for a Fotech FibreStream\n *\n * Provides a simple mechanism for containing (retaining) fibreshots\n * which are reduced in size by some factor in terms of time and\n * width\n *\n * takes in a scale factor and a callback function which is called\n * whenever a \"new\" temporally downsampled fibreshot has been created\n */\n\nimport Reducer from '@utils/reducer';\n\nconst worker = new Reducer( {} );\n\nonmessage = worker.message.bind( worker );\n","/* Worker reflection mechanism, creates a pair of classes which are designed\n   to be used as a worker thread and the parent thread and share properties\n   between the two */\n\n/* Ants are the actual workers, they do the work and let the queen take the\n   credit */\nexport class Ant {\n    public message( message: any ) {\n        const command = message.data.command;\n        const params = message.data.params;\n\n        /* depending upon the nature of the command, we need to determine\n           what to do, and what to reply with ... */\n        switch ( command ) {\n            case 'get':\n                this.command( 'get', params.key, this[ params.key ] );\n                break;\n            case 'set':\n                this[ params.key ] = params.params;\n                this.command( 'set', params.key, this[ params.key ] );\n                break;\n            case 'run':\n                const response = this[ params.key ]( params.params );\n                this.command( 'run', params.key, response );\n                break;\n            default:\n                break;\n        }\n    }\n\n    public command( command: string, key: string, params: any ): void {\n        ( <any>postMessage )( { command, key, params } );\n    }\n}\n\n/* The Queen class controls the Ant and passes data down to it, awaiting it\n   doing some work and returning stuff */\n\nexport class Queen {\n    private worker: Worker;\n    private awaitingReply: Object = {};\n    private callbacks: Object = {};\n\n    constructor( ant: any, workerPath: string, options = null ) {\n\n        const example = new ant( options );\n        const proto = Object.getPrototypeOf( example );\n\n        Object.getOwnPropertyNames( example ).forEach( ( key ) => {\n            const description = Object.getOwnPropertyDescriptor( example, key );\n\n            Object.defineProperty( this, key, {\n                get: () => {\n                    return this.get( key );\n                },\n                set: ( val ) => {\n                    this.set( key, val );\n                },\n                enumerable: true\n            } );\n        } );\n\n        Object.getOwnPropertyNames( proto ).forEach( ( key ) => {\n            /* Based opon the type of the property we are mapping we either\n               need to create a pair of getters and setters to allow us to\n               manipulate the underlying type, *or* we need to create a\n               Promise wrapped function for it */\n            const type = typeof( example[ key ] );\n\n            if ( type === 'function' ) {\n                if ( [ 'constructor', 'register' ].includes( key ) ) {\n                    return;\n                }\n                /* Add this function, or at least a mirror of it */\n                this[ key ] = ( params? ): Promise<any> => {\n                    return this.run( key, params );\n                };\n            }\n        } );\n\n        if ( options.callbacks ) {\n            this.callbacks = options.callbacks;\n        }\n\n        this.worker = null;\n        const self = this;\n\n        this.worker = new Worker( workerPath );\n        this.worker.onmessage = function( e ) {\n            self.acceptMessage( e.data );\n        };\n    }\n\n    private get( key ) {\n        return this.command( 'get', key );\n    }\n\n    private set( key, value ) {\n        return this.command( 'set', key, value );\n    }\n\n    private run( key, params ) {\n        return this.command( 'run', key, params );\n    }\n\n    private acceptMessage( message ) {\n        const command = message.command;\n        const key = message.key;\n        const answer  = message.params;\n        if ( this.awaitingReply[ key ] ) {\n            this.awaitingReply[ key ].forEach( prom => {\n                prom.resolve( answer );\n            } );\n            this.awaitingReply[ key ] = [];\n        } else {\n            /* we might have been sent this message out of the blue,\n               we should probably respond to it regardless */\n            if ( this.callbacks[ key ] ) {\n                return this.callbacks[ key ]( message.params );\n            }\n        }\n    }\n\n    public register( command: string, callback: any ) {\n        this.callbacks[ command ] = callback;\n    }\n\n    private command( command: string, key: string, params: any = null ): Promise<any> {\n        return new Promise( ( resolve, reject ) => {\n            if ( this.worker ) {\n                /* ask the remote for its value and await the response */\n                this.awaitingReply[ key ] = this.awaitingReply[ key ] || [];\n                this.awaitingReply[ key ].push( { resolve, reject } );\n                this.worker.postMessage( { command: command, params: { key: key, params: params } } );\n            }\n        } );\n    }\n}\n"],"sourceRoot":""}